
    Linked List

    * ความแตกต่างระหว่าง ArrayList และ LinkedList
        - LinkedList 
            > ไม่มีเลข index ที่จะเข้าถึงข้อมูลได้โดยตรง
            > ข้อมูลไม่ได้อยู่ติดกันใน memory และจะถูกกระจายออกไปใน memory
            > มีตัวแปรที่ชื่อว่า head ที่จะชี้ไปยัง node แรก
            > มีตัวแปรที่ชื่อว่า tail ที่ชี้ไปยัง node สุดท้าย
            > แตกละ node จะมี pointer ที่จะชี้ไปยัง node ถัดไป เรื่อย ๆ จนถึง node สุดท้าย
                > node1 -> node2 -> node 3
            > node สุดท้ายจะมี pointer ชี้เป็น null

        - ArrayList 
            > มีโครงสร้างข้อมูลที่อยู่ติดกันใน memory 
            > มีเลข index ที่จะเข้าถึงได้โดยตรง


    * BigO
        - การ add ข้อมูลเข้าไปใหม่จะเป็น O(1)
        - การ remove จะเป็น O(n) เนื่องจากหลังจากลบข้อมูลท้ายสุดออก เราจะ loop จาก head ไล่มาเรื่อย ๆ เพื่อดูว่า node สุดท้ายอยู่ที่ไหน
        - การเพิ่มข้อมูลเข้าไปใหม่จากด้านหน้าจะเป็น O(1)
        - เมื่อเราทำการลบข้อมูลหน้าสุดออก เราจะย้าย head ไปให้ node ถัดไป (head.next) จะได้เป็น O(1)
        - การแทรก node เข้าไประหว่างข้อมูลเราจำเป็นต้อง loop ไปที่ node ที่เราตั้องการจะแทรก จากนั้นให้ node ที่เข้าไปแทรกชี้ไปที่ node ถัดไป และ node 
          ที่โดนแทรกให้ชี้ไปที่ node ที่เข้ามาแทรก 
            > node1 -> node2 -> node3 -> node4 
            > เราต้องการแทรก node5 เข้าไปหน้า node3 
            > ให้ node5 ชี้ไปที่ node4 ก่อน | node5 -> node4 
            > หลังจากนั้น node3 ชี้ไปที่ node5 | node3 -> node5 
            > ผลลัพธ์: node1 -> node2 -> node3 -> node5 -> node4
          และเนื่องจากเราต้อง loop ตามรายการ ทำให้กลายเป็น O(n)
        - การ remove ระหว่างข้อมูล เราจำเป็นที่จะต้อง loop ไปที่รายการที่เราต้องการ remove จากนั้นให้ node ก่อนหน้าชี้ไปยัง node ถัดไปแทนที่จะชี้ไปที่ node ปัจจุบัน
            > node1 -> node2 -> node3 -> node5 -> node4
            > node1 -> node2 -> node3 -> node4
            > node5 หายไปจากรายการ
          และเนื่องจากเราต้อง loop จึงกลายเป็น O(n)
        - หากเราต้องการหาค่าจาม value เราต้อง loop จาก head และเปรียบเทียบว่านั่นคือค่าที่เราต้องการหรือไม่ BigO ที่นี่คือ O(n)

    * node
        เป็นทั้งค่าและตัวชี้ โดย node นั้นจะมีหน้าที่คล้ายกับ HashMap ที่เก็บ value และ next เอาไว้
        {
            "value": 7,
            "next": {
                "value": 4,
                "next": null
            }
        }